
@inject UseCase.IViewCategory ViewCategory
@inject UseCase.IViewProductByCategoryId ViewProductsByCategoryId

<h3></h3>

<div class="form-group">
    <label for="category">
        Category
    </label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option selected></option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.CategoryName</option>
        }
    </select>
</div>
@if (productsInCategory != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Product Name</th>
            <th>Quantity</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var prod in productsInCategory)
        {
            <tr @onclick="@(()=> OnSelectProduct(prod))" 
                style="@(prod.ProductId == selectedProductId?"background-color:aquamarine;cursor:pointer;":"cursor:pointer")"> 
                <td>
                    @prod.ProductName
                </td>
                <td>
                    @prod.Quantity
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public EventCallback<Product> OnProductCallback { get; set; }

    private IEnumerable<Product> productsInCategory;

    private int selectedCategoryId;
    private int selectedProductId;

    public int SelectedCategoryId
    {
        get { return selectedCategoryId; }
        set
        {
            selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryId.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }

    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategory.Execute();
    }

    private void OnSelectProduct(Product product)
    {
        OnProductCallback.InvokeAsync(product);
        if (product != null)
        {
            selectedProductId = product.ProductId;
        }
    }
}
